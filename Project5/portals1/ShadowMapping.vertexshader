#version 330 core

layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec2 vertexUV;
layout(location = 3) in vec3 vertexTangent_modelspace;
/*
uniform mat4 P;
uniform mat4 V;
uniform mat4 M;
uniform mat4 lightVP;


out vec3 vertex_position_worldspace;
out vec3 vertex_position_cameraspace;
out vec3 vertex_normal_cameraspace;
out vec2 vertex_UV;
out mat3 TBN;
out vec4 vertex_position_lightspace;

void main() {

    // Output position of the vertex
    gl_Position =  P * V * M * vec4(vertexPosition_modelspace, 1);
    
    // FS
    vertex_position_worldspace = (M * vec4(vertexPosition_modelspace, 1)).xyz;
    vertex_position_cameraspace = (V * M * vec4(vertexPosition_modelspace, 1)).xyz;
    vertex_normal_cameraspace = (V * M * vec4(vertexNormal_modelspace, 0)).xyz;
    vec3 vertex_normal_worldspace = normalize((M * vec4(vertexNormal_modelspace, 0)).xyz);
    vec3 vertex_tangent_cameraspace = normalize((V*M *vec4(vertexTangent_modelspace, 0)).xyz);
    vertex_UV = vertexUV;
    vec3 Bitangent = cross(vertex_normal_worldspace, vertex_tangent_cameraspace);
    // Task 4.2
    vertex_position_lightspace = lightVP*vec4(vertex_position_worldspace,1.0);

    TBN = mat3(
        vertex_tangent_cameraspace,
        Bitangent,
        vertex_normal_cameraspace
    );
}
*/
out vec2 TexCoords;

out VS_OUT {
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoords;
} vs_out;
out mat3 TBN;
uniform mat4 P;
uniform mat4 V;
uniform mat4 M;


void main()
{
    vs_out.FragPos = vec3(M * vec4(vertexPosition_modelspace, 1.0));
    vs_out.Normal = vec3(transpose(inverse(mat4(M))) * vec4(vertexNormal_modelspace,1.0));
    vec3 vertex_normal_world = ( M * vec4(vertexNormal_modelspace, 0)).xyz;
    vec3 vertex_tangent_worldspace = normalize((M *vec4(vertexTangent_modelspace, 0)).xyz);
    vec3 Bitangent = cross(vertex_normal_world, vertex_tangent_worldspace);
    TBN = mat3(
        vertex_tangent_worldspace,
        Bitangent,
        vertex_normal_world
    );
    vs_out.TexCoords = vertexUV;
    gl_Position = P * V * M * vec4(vertexPosition_modelspace, 1.0);
}